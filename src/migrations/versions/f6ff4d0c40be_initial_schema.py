"""Initial schema

Revision ID: f6ff4d0c40be
Revises: 
Create Date: 2025-03-06 08:50:01.584927

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f6ff4d0c40be'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dim_customer',
    sa.Column('customer_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.Column('address', sa.String(length=100), nullable=True),
    sa.Column('city', sa.String(length=50), nullable=True),
    sa.Column('country', sa.String(length=50), nullable=True),
    sa.Column('customer_type', sa.String(length=20), nullable=True),
    sa.PrimaryKeyConstraint('customer_id')
    )
    op.create_table('dim_date',
    sa.Column('date_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('full_date', sa.Date(), nullable=True),
    sa.Column('day', sa.Integer(), nullable=True),
    sa.Column('month', sa.Integer(), nullable=True),
    sa.Column('quarter', sa.Integer(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('is_holiday', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('date_id')
    )
    op.create_table('dim_driver',
    sa.Column('driver_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=True),
    sa.Column('license_number', sa.String(length=20), nullable=True),
    sa.Column('experience_years', sa.Float(), nullable=True),
    sa.Column('hire_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('driver_id')
    )
    op.create_table('dim_fuel',
    sa.Column('fuel_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('fuel_type', sa.String(length=20), nullable=True),
    sa.Column('price_per_liter', sa.Float(), nullable=True),
    sa.Column('supplier_name', sa.String(length=50), nullable=True),
    sa.Column('purchase_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('fuel_id')
    )
    op.create_table('dim_product',
    sa.Column('product_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_name', sa.String(length=50), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('weight_kg', sa.Float(), nullable=True),
    sa.Column('fragility', sa.String(length=20), nullable=True),
    sa.PrimaryKeyConstraint('product_id')
    )
    op.create_table('dim_route',
    sa.Column('route_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('start_location', sa.String(length=50), nullable=True),
    sa.Column('start_latitude', sa.Float(), nullable=True),
    sa.Column('start_longitude', sa.Float(), nullable=True),
    sa.Column('end_location', sa.String(length=50), nullable=True),
    sa.Column('end_latitude', sa.Float(), nullable=True),
    sa.Column('end_longitude', sa.Float(), nullable=True),
    sa.Column('distance_km', sa.Float(), nullable=True),
    sa.Column('estimated_time_hours', sa.Float(), nullable=True),
    sa.Column('road_type', sa.String(length=20), nullable=True),
    sa.PrimaryKeyConstraint('route_id')
    )
    op.create_table('dim_vehicle',
    sa.Column('vehicle_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('registration_number', sa.String(length=20), nullable=True),
    sa.Column('vehicle_type', sa.String(length=20), nullable=True),
    sa.Column('capacity_kg', sa.Float(), nullable=True),
    sa.Column('fuel_type', sa.String(length=20), nullable=True),
    sa.Column('purchase_date', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('vehicle_id')
    )
    op.create_table('dim_warehouse',
    sa.Column('warehouse_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('warehouse_name', sa.String(length=50), nullable=True),
    sa.Column('city', sa.String(length=50), nullable=True),
    sa.Column('country', sa.String(length=50), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('capacity_m3', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('warehouse_id')
    )
    op.create_table('fact_shipments',
    sa.Column('shipment_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('route_id', sa.Integer(), nullable=True),
    sa.Column('vehicle_id', sa.Integer(), nullable=True),
    sa.Column('driver_id', sa.Integer(), nullable=True),
    sa.Column('warehouse_id', sa.Integer(), nullable=True),
    sa.Column('date_id', sa.Integer(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('shipping_cost', sa.Float(), nullable=True),
    sa.Column('delivery_time', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['dim_customer.customer_id'], ),
    sa.ForeignKeyConstraint(['date_id'], ['dim_date.date_id'], ),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['dim_route.route_id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['dim_vehicle.vehicle_id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['dim_warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('shipment_id')
    )
    op.create_table('fact_vehicle_usage',
    sa.Column('usage_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('vehicle_id', sa.Integer(), nullable=True),
    sa.Column('driver_id', sa.Integer(), nullable=True),
    sa.Column('route_id', sa.Integer(), nullable=True),
    sa.Column('date_id', sa.Integer(), nullable=True),
    sa.Column('fuel_id', sa.Integer(), nullable=True),
    sa.Column('distance_km', sa.Float(), nullable=True),
    sa.Column('fuel_consumption', sa.Float(), nullable=True),
    sa.Column('maintenance_cost', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['date_id'], ['dim_date.date_id'], ),
    sa.ForeignKeyConstraint(['driver_id'], ['dim_driver.driver_id'], ),
    sa.ForeignKeyConstraint(['fuel_id'], ['dim_fuel.fuel_id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['dim_route.route_id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['dim_vehicle.vehicle_id'], ),
    sa.PrimaryKeyConstraint('usage_id')
    )
    op.create_table('fact_warehouse_activity',
    sa.Column('activity_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('warehouse_id', sa.Integer(), nullable=True),
    sa.Column('date_id', sa.Integer(), nullable=True),
    sa.Column('stock_in', sa.Float(), nullable=True),
    sa.Column('stock_out', sa.Float(), nullable=True),
    sa.Column('storage_time', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['date_id'], ['dim_date.date_id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['dim_product.product_id'], ),
    sa.ForeignKeyConstraint(['warehouse_id'], ['dim_warehouse.warehouse_id'], ),
    sa.PrimaryKeyConstraint('activity_id')
    )
    op.create_table('dim_incident',
    sa.Column('incident_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('shipment_id', sa.Integer(), nullable=True),
    sa.Column('vehicle_id', sa.Integer(), nullable=True),
    sa.Column('date_id', sa.Integer(), nullable=True),
    sa.Column('incident_type', sa.String(length=50), nullable=True),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('cost_impact', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['date_id'], ['dim_date.date_id'], ),
    sa.ForeignKeyConstraint(['shipment_id'], ['fact_shipments.shipment_id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['dim_vehicle.vehicle_id'], ),
    sa.PrimaryKeyConstraint('incident_id')
    )
    #op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    #op.create_table('spatial_ref_sys',
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    # sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    # )
    op.drop_table('dim_incident')
    op.drop_table('fact_warehouse_activity')
    op.drop_table('fact_vehicle_usage')
    op.drop_table('fact_shipments')
    op.drop_table('dim_warehouse')
    op.drop_table('dim_vehicle')
    op.drop_table('dim_route')
    op.drop_table('dim_product')
    op.drop_table('dim_fuel')
    op.drop_table('dim_driver')
    op.drop_table('dim_date')
    op.drop_table('dim_customer')
    # ### end Alembic commands ###
